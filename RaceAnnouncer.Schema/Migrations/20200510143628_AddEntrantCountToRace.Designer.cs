// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RaceAnnouncer.Schema;

namespace RaceAnnouncer.Schema.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200510143628_AddEntrantCountToRace")]
    partial class AddEntrantCountToRace
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.APIUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("APIKey")
                        .IsRequired()
                        .HasColumnName("api_key")
                        .HasColumnType("varchar(520) CHARACTER SET utf8mb4")
                        .HasMaxLength(520);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnName("expires_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("t_api_user");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnName("fk_t_disc_channel")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("MessageCreatedAt")
                        .HasColumnName("msg_created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("MessageUpdatedAt")
                        .HasColumnName("msg_updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("RaceId")
                        .HasColumnName("fk_t_race")
                        .HasColumnType("bigint");

                    b.Property<ulong>("Snowflake")
                        .HasColumnName("snowflake")
                        .HasColumnType("bigint unsigned");

                    b.Property<long>("TrackerId")
                        .HasColumnName("fk_t_tracker")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Snowflake");

                    b.HasIndex("ChannelId");

                    b.HasIndex("RaceId");

                    b.HasIndex("TrackerId");

                    b.ToTable("t_announcement");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<long>("GuildId")
                        .HasColumnName("fk_t_disc_guild")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<ulong>("Snowflake")
                        .HasColumnName("snowflake")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Snowflake");

                    b.HasIndex("GuildId");

                    b.ToTable("t_disc_channel");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Entrant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Place")
                        .HasColumnName("place")
                        .HasColumnType("int");

                    b.Property<long>("RaceId")
                        .HasColumnName("fk_t_race")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("t_entrant");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("SrlId")
                        .HasColumnName("srl_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Abbreviation");

                    b.HasAlternateKey("SrlId");

                    b.ToTable("t_game");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Guild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<ulong>("Snowflake")
                        .HasColumnName("snowflake")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Snowflake");

                    b.ToTable("t_disc_guild");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EntrantCount")
                        .HasColumnName("entrant_count")
                        .HasColumnType("int");

                    b.Property<long>("GameId")
                        .HasColumnName("fk_t_game")
                        .HasColumnType("bigint");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnName("goal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(2048);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SrlId")
                        .IsRequired()
                        .HasColumnName("srl_id")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Time")
                        .HasColumnName("time")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("t_race");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Tracker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long>("ChannelId")
                        .HasColumnName("fk_t_disc_channel")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("GameId")
                        .HasColumnName("fk_t_game")
                        .HasColumnType("bigint");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GameId");

                    b.ToTable("t_tracker");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Update", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnName("finished_at")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnName("started_at")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Success")
                        .HasColumnName("success")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("t_update");
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Announcement", b =>
                {
                    b.HasOne("RaceAnnouncer.Schema.Models.Channel", "Channel")
                        .WithMany("Announcements")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceAnnouncer.Schema.Models.Race", "Race")
                        .WithMany("Announcements")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceAnnouncer.Schema.Models.Tracker", "Tracker")
                        .WithMany("Announcements")
                        .HasForeignKey("TrackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Channel", b =>
                {
                    b.HasOne("RaceAnnouncer.Schema.Models.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Entrant", b =>
                {
                    b.HasOne("RaceAnnouncer.Schema.Models.Race", "Race")
                        .WithMany("Entrants")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Race", b =>
                {
                    b.HasOne("RaceAnnouncer.Schema.Models.Game", "Game")
                        .WithMany("Races")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RaceAnnouncer.Schema.Models.Tracker", b =>
                {
                    b.HasOne("RaceAnnouncer.Schema.Models.Channel", "Channel")
                        .WithMany("Trackers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaceAnnouncer.Schema.Models.Game", "Game")
                        .WithMany("Trackers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
